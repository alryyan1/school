import { Gender } from "./student";

// types/teacher.d.ts or interfaces/teacher.ts
export interface Teacher {
    id: number;
    national_id: string;
    name: string;
    email: string;
    phone: string | null;
    gender: Gender;
    birth_date: string | null; // ISO date string (e.g., "1990-01-15")
    place_of_birth: string | null;
    nationality: string | null;
    document_type: 'جواز سفر' | 'البطاقة الشخصية' | 'الرقم الوطني' | null;
    document_number: string | null;
    marital_status: 'ارمل' | 'مطلق' | 'متزوج' | 'اعزب' | null;
    number_of_children: number | null;
    children_in_school: number | null;
    secondary_phone: string | null;
    whatsapp_number: string | null;
    qualification: string;
    highest_qualification: 'جامعي' | 'ثانوي' | null;
    specialization: string | null;
    academic_degree: 'دبلوم' | 'بكالوريوس' | 'ماجستير' | 'دكتوراه' | null;
    photo_path: string;
    hire_date: string; // ISO date string
    appointment_date: string | null;
    years_of_teaching_experience: number | null;
    training_courses: string | null;
    address: string | null;
    photo: File | null; // URL or file path
    academic_qualifications_doc_path: string | null;
    personal_id_doc_path: string | null;
    cv_doc_path: string | null;
    is_active: boolean;
    school_id?: number; // Optional foreign key
    created_at?: string; // Auto-generated by Laravel
    updated_at?: string; // Auto-generated by Laravel
    deleted_at?: string | null; // For soft deletes
  
    // Relationships (expand as needed)
    // school?: School; 
    // subjects?: Subject[];
  }
  // src/api/teacherApi.ts

 export type TeacherResponse = {
    data: {
        id: number;
        national_id: string;
        name: string;
        email: string;
        phone: string;
        gender: Gender;
        birth_date: string; // or Date if you'll parse it
        place_of_birth: string | null;
        nationality: string | null;
        document_type: 'جواز سفر' | 'البطاقة الشخصية' | 'الرقم الوطني' | null;
        document_number: string | null;
        marital_status: 'ارمل' | 'مطلق' | 'متزوج' | 'اعزب' | null;
        number_of_children: number | null;
        children_in_school: number | null;
        secondary_phone: string | null;
        whatsapp_number: string | null;
        qualification: string;
        highest_qualification: 'جامعي' | 'ثانوي' | null;
        specialization: string | null;
        academic_degree: 'دبلوم' | 'بكالوريوس' | 'ماجستير' | 'دكتوراه' | null;
        hire_date: string; // or Date if you'll parse it
        appointment_date: string | null;
        years_of_teaching_experience: number | null;
        training_courses: string | null;
        address: string;
        photo_path: string;
        photo_url: string;
        academic_qualifications_doc_path: string | null;
        personal_id_doc_path: string | null;
        cv_doc_path: string | null;
        is_active: boolean;
        created_at: string; // or Date if you'll parse it
        updated_at: string; // or Date if you'll parse it
    };
};
  // Type for creating/updating (omits read-only fields, makes others potentially optional for update)
export type TeacherFormData = Omit<Teacher, 'id' | 'created_at' | 'updated_at' | 'photo_url'|'photo_path'> & {
    photo?: File | null; // For handling file input
};
// Helper to create FormData
export const createTeacherFormData = (teacherData: TeacherFormData): FormData => {
    const formData = new FormData();
    // Append all fields except the photo file itself
    Object.keys(teacherData).forEach(key => {
        if (key !== 'photo' && teacherData[key as keyof TeacherFormData] !== null && teacherData[key as keyof TeacherFormData] !== undefined) {
             // Special handling for boolean `is_active` to send '1' or '0' if needed by backend,
             // otherwise, send directly. Let's assume backend handles true/false correctly.
             // if (key === 'is_active') {
             //    formData.append(key, teacherData[key] ? '1' : '0');
             // } else {
                 formData.append(key, teacherData[key as keyof TeacherFormData ] as string | Blob);
             // }
        }
    });
    // Append the photo file if it exists
    if (teacherData.photo) {
        formData.append('photo', teacherData.photo);
    }

    return formData;
};

// Type for paginated response
export type PaginatedTeachersResponse = {
    data: Teacher[];
    links: {
        first: string | null;
        last: string | null;
        prev: string | null;
        next: string | null;
    };
    meta: {
        current_page: number;
        from: number;
        last_page: number;
        path: string;
        per_page: number;
        to: number;
        total: number;
    };
};

